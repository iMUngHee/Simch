

      
        
        
          // no error
let message = "hello";
message = 123456;
        
      
      
      
      
        
        
          let n = 123;
n = 12.345;
        
      
      
      
            Mathematical operations are safe
            Doing maths is “safe” in JavaScript. We can do anything: divide by zero, treat non-numeric strings as numbers, etc.
The script will never stop with a fatal error (“die”). At worst, we’ll get NaN as the result.

      
        
        
          console.log(9007199254740991 + 1); // 9007199254740992
console.log(9007199254740991 + 2); // 9007199254740992
        
      
      
      
      
        
        
          // the "n" at the end means it's a BigInt
const bigInt = 1234567890123456789012345678901234567890n;
        
      
      
      
            Compatibility issues
            Right now, BigInt is supported in Firefox/Chrome/Edge/Safari, but not in IE.

      
        
        
          let str = "Hello";
let str2 = 'Single quotes are ok too';
let phrase = `can embed another ${str}`;
        
      
      
      
      
        
        
          
            
          
          
            
          
        
        
          let name = "John";

// embed a variable
alert( `Hello, ${name}!` ); // Hello, John!

// embed an expression
alert( `the result is ${1 + 2}` ); // the result is 3
        
      
      
      
      
        
        
          
            
          
          
            
          
        
        
          alert( "the result is ${1 + 2}" ); // the result is ${1 + 2} (double quotes do nothing)
        
      
      
      
            There is no character type.
            In some languages, there is a special “character” type for a single character. For example, in the C language and in Java it is called “char”.
In JavaScript, there is no such type. There’s only one type: string. A string may consist of zero characters (be empty), one character or many of them.

      
        
        
          let nameFieldChecked = true; // yes, name field is checked
let ageFieldChecked = false; // no, age field is not checked
        
      
      
      
      
        
        
          
            
          
          
            
          
        
        
          let isGreater = 4 > 1;

alert( isGreater ); // true (the comparison result is "yes")
        
      
      
      
      
        
        
          let age = null;
        
      
      
      
      
        
        
          
            
          
          
            
          
        
        
          let age;

alert(age); // shows "undefined"
        
      
      
      
      
        
        
          
            
          
          
            
          
        
        
          let age = 100;

// change the value to undefined
age = undefined;

alert(age); // "undefined"
        
      
      
      
      
        
        
          typeof undefined // "undefined"

typeof 0 // "number"

typeof 10n // "bigint"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)
        
      
      
      
            The typeof(x) syntax
            You may also come across another syntax: typeof(x). It’s the same as typeof x.
To put it clear: typeof is an operator, not a function. The parentheses here aren’t a part of typeof. It’s the kind of parentheses used for mathematical grouping.
Usually, such parentheses contain a mathematical expression, such as (2 + 2), but here they contain only one argument (x). Syntactically, they allow to avoid a space between the typeof operator and its argument, and some people like it.
Some people prefer typeof(x), although the typeof x syntax is much more common.

